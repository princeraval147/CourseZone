const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const sendEmail = require("../utils/sendEmail");
const { uploadMedia, deleteMediaFromCloudinary } = require("../utils/cloudinary"); 


// Register User & Send OTP
exports.register = async (req, res) => {
  const { username, email, password } = req.body;
  try {
    let user = await User.findOne({ email });

    if (user) {
      if (!user.isVerified) {
        return res.status(400).json({ message: "User already registered. Please verify OTP." });
      }
      return res.status(400).json({ message: "Email already exists." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    console.log(otp);
    const otpExpires = new Date(Date.now() + 10 * 60 * 1000);

    user = new User({ username, email, password: hashedPassword, otp, otpExpires });

    await user.save();
    // sendEmail(email, otp);

    res.json({ message: "User registered! Please verify OTP." });
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};

// Verify OTP
exports.verifyOTP = async (req, res) => {
  const { email, otp } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) return res.status(400).json({ message: "User not found." });
    if (user.otp !== otp) return res.status(400).json({ message: "Invalid OTP." });
    if (user.otpExpires < Date.now()) return res.status(400).json({ message: "OTP expired. Request a new OTP." });

    user.isVerified = true;
    user.otp = null;
    user.otpExpires = null;
    await user.save();

    res.json({ message: "OTP Verified! You can now log in." });
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};

// Login User & Set JWT in HTTP-only Cookie
exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user || !user.isVerified) return res.status(400).json({ message: "Invalid credentials or unverified email." });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "Invalid credentials." });

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });

    res.cookie("token", token, { httpOnly: true, secure: false }); // Secure: false for local testing
    res.json({ message: "Login successful" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
};

// Logout User (Clear JWT Cookie)
exports.logout = (req, res) => {
  res.clearCookie("token");
  res.json({ message: "Logged out successfully" });
};

const otpStore = {}; // Temporary OTP storage

// Forgot Password: Generate OTP
exports.forgotPassword = async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) return res.status(400).json({ message: "Email not registered" });

  const otp = Math.floor(100000 + Math.random() * 900000);
  otpStore[email] = otp;
  console.log(otp,email);
  // await sendOTP(email, otp); // Function to send OTP via email
  res.json({ message: "OTP sent to your email" });
};

// Reset Password: Verify OTP & Update Password
exports.resetPassword = async (req, res) => {
  const { email, otp, newPassword } = req.body;

  console.log("Received OTP:", otp, "Stored OTP:", otpStore[email]);

  if (!otpStore[email]) {
    return res.status(400).json({ message: "OTP expired or not found" });
  }

  if (parseInt(otp) !== otpStore[email]) {
    return res.status(400).json({ message: "Invalid OTP" });
  }

  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(newPassword, salt);

  await User.updateOne({ email }, { password: hashedPassword });
  delete otpStore[email];

  res.json({ message: "Password reset successfully" });
};

exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user).select("-password"); // Use userId, not id
    if (!user) return res.status(404).json({ message: "User not found" });

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "Server Error" });
  }
};

// exports.updateProfile = async (req, res) => {
//   try {
//     const userId = req.user;
//     const { username, oldPassword, newPassword } = req.body;
//     const profilePhoto = req.file;

//     // Find the user
//     const user = await User.findById(userId);
//     if (!user) {
//       return res.status(404).json({
//         success: false,
//         message: "User not found",
//       });
//     }

//     let photoUrl = user.photoUrl;

//     // Handle profile photo update
//     if (profilePhoto) {
//       if (user.photoUrl) {
//         const publicId = user.photoUrl.split("/").pop().split(".")[0];
//         await cloudinary.uploader.destroy(publicId);
//       }

//       const cloudResponse = await cloudinary.uploader.upload(profilePhoto.path, {
//         folder: "profile_pictures",
//       });

//       photoUrl = cloudResponse.secure_url;
//     }

//     // Handle password update
//     if (oldPassword && newPassword) {
//       const isMatch = await bcrypt.compare(oldPassword, user.password);
//       if (!isMatch) {
//         return res.status(400).json({
//           success: false,
//           message: "Old password is incorrect",
//         });
//       }

//       // Hash the new password before saving
//       const salt = await bcrypt.genSalt(10);
//       const hashedPassword = await bcrypt.hash(newPassword, salt);
//       user.password = hashedPassword;
//     }

//     // Update user data
//     user.username = username || user.username;
//     user.photoUrl = photoUrl;
//     await user.save();

//     return res.status(200).json({success: true,message: "Profile updated successfully."});
//   } catch (error) {
//     console.error(error);
//     return res.status(500).json({
//       success: false,
//       message: "Failed to update profile",
//     });
//   }
// };

exports.updateProfile = async (req, res) => {
  try {
    const userId = req.user; // User ID from token
    const { name } = req.body;
    const profilePhoto = req.file;

    // Find user by ID
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    // Delete old photo from Cloudinary if exists
    if (user.photoUrl) {
      const publicId = user.photoUrl.split("/").pop().split(".")[0];
      await deleteMediaFromCloudinary(publicId);
    }

    // Upload new photo
    let photoUrl = user.photoUrl;
    if (profilePhoto) {
      const cloudResponse = await uploadMedia(profilePhoto.buffer);
      if (!cloudResponse || !cloudResponse.secure_url) {
        return res.status(500).json({
          success: false,
          message: "Failed to upload image to Cloudinary",
        });
      }
      photoUrl = cloudResponse.secure_url;
    }

    // Update user data
    const updatedData = { name, photoUrl };
    const updatedUser = await User.findByIdAndUpdate(userId, updatedData, { new: true }).select("-password");

    return res.status(200).json({
      success: true,
      user: updatedUser,
      message: "Profile updated successfully.",
    });
  } catch (error) {
    console.error("Update Profile Error:", error);
    return res.status(500).json({
      success: false,
      message: "Failed to update profile",
    });
  }
};









.profile-container {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}

.profile-card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  padding: 20px;
  width: 300px;
  text-align: center;
  transition: all 0.3s ease;
  margin-top: 50px;
  overflow: hidden;
}

.profile-card.expand {
  width: 500px;
}

.profile-image {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  object-fit: cover;
  margin-bottom: 15px;
}

.profile-info h2 {
  font-size: 24px;
  margin-bottom: 10px;
}

.profile-info p {
  font-size: 14px;
  color: #555;
}

.role {
  font-size: 12px;
  font-style: italic;
  color: #888;
}

.profile-actions button,
.profile-edit-form button {
  background-color: #4CAF50;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 14px;
  border-radius: 5px;
  cursor: pointer;
  margin: 10px 0;
}

.profile-actions button:nth-child(2),
.profile-edit-form button:nth-child(2) {
  background-color: #f44336;
}

.profile-actions button:hover,
.profile-edit-form button:hover {
  opacity: 0.9;
}

.profile-edit-form {
  margin-top: 20px;
}

.form-group {
  margin-bottom: 15px;
  text-align: left;
}

.form-group input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 14px;
}

button {
  width: 100%;
  font-size: 16px;
  cursor: pointer;
}

button:disabled {
  background-color: #ddd;
}

button:nth-child(2) {
  /* background-color: #f44336; */
}

button:nth-child(3) {
  background-color: #2196F3;
}

@media (max-width: 768px) {
  .profile-card {
    width: 100%;
    padding: 15px;
  }

  .profile-card.expand {
    width: 100%;
  }

  .profile-image {
    width: 80px;
    height: 80px;
  }

  .form-group input {
    font-size: 12px;
  }

  button {
    font-size: 14px;
  }
}
